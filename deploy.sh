#!/bin/bash

# Script de d√©ploiement BDD Bot Application
# Usage: ./deploy.sh [environment]
# Environments: local, staging, production

set -e

ENVIRONMENT=${1:-local}
PROJECT_NAME="bdd-bot-app"

echo "üöÄ D√©ploiement de $PROJECT_NAME en environnement: $ENVIRONMENT"

case $ENVIRONMENT in
  "local")
    echo "üì¶ D√©ploiement local avec Docker Compose..."
    
    # V√©rifier que Docker est install√©
    if ! command -v docker &> /dev/null; then
      echo "‚ùå Docker n'est pas install√©"
      exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
      echo "‚ùå Docker Compose n'est pas install√©"
      exit 1
    fi
    
    # Copier le fichier d'environnement
    if [ ! -f .env ]; then
      echo "üìù Cr√©ation du fichier .env depuis .env.example"
      cp .env.example .env
      echo "‚ö†Ô∏è  Veuillez configurer les variables dans .env avant de continuer"
      echo "   Notamment: DB_ROOT_PASSWORD, DB_PASSWORD, JWT_SECRET"
      read -p "Appuyez sur Entr√©e pour continuer..."
    fi
    
    # Construire et d√©marrer les services
    echo "üî® Construction des images Docker..."
    docker-compose build
    
    echo "üöÄ D√©marrage des services..."
    docker-compose up -d
    
    echo "‚è≥ Attente du d√©marrage des services..."
    sleep 30
    
    # V√©rifier que les services sont en cours d'ex√©cution
    echo "üîç V√©rification des services..."
    docker-compose ps
    
    # Tests de sant√©
    echo "üè• Tests de sant√©..."
    if curl -f http://localhost:8080/health > /dev/null 2>&1; then
      echo "‚úÖ Frontend: OK"
    else
      echo "‚ùå Frontend: KO"
    fi
    
    if curl -f http://localhost:3001/health > /dev/null 2>&1; then
      echo "‚úÖ Backend: OK"
    else
      echo "‚ùå Backend: KO"
    fi
    
    echo ""
    echo "üéâ D√©ploiement local termin√©!"
    echo "üì± Frontend: http://localhost:8080"
    echo "üîß Backend API: http://localhost:3001"
    echo "üóÑÔ∏è  Base de donn√©es: localhost:3306"
    echo ""
    echo "üìã Commandes utiles:"
    echo "   docker-compose logs -f          # Voir les logs"
    echo "   docker-compose down             # Arr√™ter les services"
    echo "   docker-compose down -v          # Arr√™ter et supprimer les volumes"
    ;;
    
  "staging")
    echo "üèóÔ∏è  D√©ploiement staging sur AWS..."
    
    # V√©rifier AWS CLI
    if ! command -v aws &> /dev/null; then
      echo "‚ùå AWS CLI n'est pas install√©"
      exit 1
    fi
    
    # V√©rifier les credentials AWS
    if ! aws sts get-caller-identity > /dev/null 2>&1; then
      echo "‚ùå Credentials AWS non configur√©s"
      exit 1
    fi
    
    echo "üî® Construction et push des images..."
    
    # Tag et push backend
    docker build -t $PROJECT_NAME-backend:staging ./backend
    docker tag $PROJECT_NAME-backend:staging $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$PROJECT_NAME-backend:staging
    docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$PROJECT_NAME-backend:staging
    
    # Tag et push frontend
    docker build -t $PROJECT_NAME-frontend:staging ./frontend
    docker tag $PROJECT_NAME-frontend:staging $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$PROJECT_NAME-frontend:staging
    docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$PROJECT_NAME-frontend:staging
    
    echo "üöÄ Mise √† jour des services ECS..."
    aws ecs update-service --cluster $ECS_CLUSTER_STAGING --service $ECS_SERVICE_BACKEND_STAGING --force-new-deployment
    aws ecs update-service --cluster $ECS_CLUSTER_STAGING --service $ECS_SERVICE_FRONTEND_STAGING --force-new-deployment
    
    echo "‚è≥ Attente de la stabilisation..."
    aws ecs wait services-stable --cluster $ECS_CLUSTER_STAGING --services $ECS_SERVICE_BACKEND_STAGING $ECS_SERVICE_FRONTEND_STAGING
    
    echo "‚úÖ D√©ploiement staging termin√©!"
    ;;
    
  "production")
    echo "üè≠ D√©ploiement production sur AWS..."
    
    # Confirmation de s√©curit√©
    read -p "‚ö†Ô∏è  √ätes-vous s√ªr de vouloir d√©ployer en production? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
      echo "‚ùå D√©ploiement annul√©"
      exit 1
    fi
    
    # V√©rifier AWS CLI
    if ! command -v aws &> /dev/null; then
      echo "‚ùå AWS CLI n'est pas install√©"
      exit 1
    fi
    
    # V√©rifier les credentials AWS
    if ! aws sts get-caller-identity > /dev/null 2>&1; then
      echo "‚ùå Credentials AWS non configur√©s"
      exit 1
    fi
    
    echo "üî® Construction et push des images..."
    
    # Tag et push backend
    docker build -t $PROJECT_NAME-backend:latest ./backend
    docker tag $PROJECT_NAME-backend:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$PROJECT_NAME-backend:latest
    docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$PROJECT_NAME-backend:latest
    
    # Tag et push frontend
    docker build -t $PROJECT_NAME-frontend:latest ./frontend
    docker tag $PROJECT_NAME-frontend:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$PROJECT_NAME-frontend:latest
    docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$PROJECT_NAME-frontend:latest
    
    echo "üöÄ Mise √† jour des services ECS..."
    aws ecs update-service --cluster $ECS_CLUSTER_PROD --service $ECS_SERVICE_BACKEND_PROD --force-new-deployment
    aws ecs update-service --cluster $ECS_CLUSTER_PROD --service $ECS_SERVICE_FRONTEND_PROD --force-new-deployment
    
    echo "‚è≥ Attente de la stabilisation..."
    aws ecs wait services-stable --cluster $ECS_CLUSTER_PROD --services $ECS_SERVICE_BACKEND_PROD $ECS_SERVICE_FRONTEND_PROD
    
    echo "‚úÖ D√©ploiement production termin√©!"
    ;;
    
  *)
    echo "‚ùå Environnement non support√©: $ENVIRONMENT"
    echo "Environnements disponibles: local, staging, production"
    exit 1
    ;;
esac

echo ""
echo "üéØ D√©ploiement termin√© avec succ√®s!"

