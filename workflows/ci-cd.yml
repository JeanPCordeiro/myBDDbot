name: CI/CD Pipeline - BDD Bot Application

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}/backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend

jobs:
  # Tests et Linting
  test:
    name: Tests et Qualité Code
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          frontend/package-lock.json
    
    # Tests Backend
    - name: Install Backend Dependencies
      working-directory: ./backend
      run: npm ci
    
    - name: Lint Backend
      working-directory: ./backend
      run: npm run lint
    
    - name: Test Backend
      working-directory: ./backend
      run: npm test
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 3306
        DB_NAME: test_bdd_bot
        DB_USER: test_user
        DB_PASSWORD: test_password
        JWT_SECRET: test-secret
    
    # Tests Frontend
    - name: Install Frontend Dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Lint Frontend
      working-directory: ./frontend
      run: npm run lint
    
    - name: Build Frontend
      working-directory: ./frontend
      run: npm run build
      env:
        VITE_API_BASE_URL: http://localhost:3001/api
    
    # Tests E2E (optionnel)
    - name: E2E Tests
      if: matrix.node-version == '20.x'
      run: |
        # Démarrer les services pour les tests E2E
        docker-compose -f docker-compose.test.yml up -d
        # Attendre que les services soient prêts
        sleep 30
        # Exécuter les tests E2E (à implémenter)
        # npm run test:e2e
        # Arrêter les services
        docker-compose -f docker-compose.test.yml down

  # Analyse de Sécurité
  security:
    name: Analyse de Sécurité
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Build et Push des Images Docker
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name != 'pull_request'
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata for Backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
    
    - name: Build and push Backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Extract metadata for Frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
    
    - name: Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL || 'http://localhost:3001/api' }}

  # Déploiement sur AWS Fargate (Production)
  deploy-production:
    name: Deploy to AWS Fargate
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: https://bdd-bot.example.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Deploy to ECS
      run: |
        # Mettre à jour la définition de tâche ECS
        aws ecs update-service \
          --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
          --service ${{ secrets.ECS_SERVICE_NAME_BACKEND }} \
          --force-new-deployment
        
        aws ecs update-service \
          --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
          --service ${{ secrets.ECS_SERVICE_NAME_FRONTEND }} \
          --force-new-deployment
    
    - name: Wait for deployment
      run: |
        aws ecs wait services-stable \
          --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
          --services ${{ secrets.ECS_SERVICE_NAME_BACKEND }} ${{ secrets.ECS_SERVICE_NAME_FRONTEND }}
    
    - name: Verify deployment
      run: |
        # Vérifier que l'application répond
        curl -f ${{ secrets.PRODUCTION_URL }}/health || exit 1

  # Déploiement de Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    environment:
      name: staging
      url: https://staging-bdd-bot.example.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Deploy to ECS Staging
      run: |
        aws ecs update-service \
          --cluster ${{ secrets.ECS_CLUSTER_NAME_STAGING }} \
          --service ${{ secrets.ECS_SERVICE_NAME_BACKEND_STAGING }} \
          --force-new-deployment
        
        aws ecs update-service \
          --cluster ${{ secrets.ECS_CLUSTER_NAME_STAGING }} \
          --service ${{ secrets.ECS_SERVICE_NAME_FRONTEND_STAGING }} \
          --force-new-deployment

  # Notification
  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()
    
    steps:
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow

